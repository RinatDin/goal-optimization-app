#!/usr/bin/env python
# coding: utf-8

# In[1]:


import streamlit as st
import datetime
import io
import pandas as pd
import os
from openai import OpenAI
from browser_history import get_history

# === CONFIG ===
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))  # Replace with your real token
HISTORY_FILE = "history.csv"

# === Initialize session state ===
if "goals_list" not in st.session_state:
    st.session_state["goals_list"] = []
if "browser_log" not in st.session_state:
    st.session_state["browser_log"] = ""

# === Functions ===
def analyze_day_with_ai(goals, actions, browser_log):
    prompt = f"""
    –¶–µ–ª—å(–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {goals}
    –î–µ–π—Å—Ç–≤–∏—è –∑–∞ –¥–µ–Ω—å: {actions}
    –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {browser_log}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –µ–≥–æ –¥–µ–Ω—å –±—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ (–æ—Ç 0 –¥–æ 100).
    –î–∞–π 2‚Äì3 —Å–æ–≤–µ—Ç–∞, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–µ–ª—è–º–∏ –∑–∞–≤—Ç—Ä–∞.
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    - –û—Ü–µ–Ω–∫–∞: xx/100
    - –°–æ–≤–µ—Ç—ã:
    """
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

def get_browser_data():
    outputs = get_history()
    history = outputs.histories[-10:]
    return "\n".join([f"{dt.strftime('%H:%M')} ‚Äî {url}" for dt, url, *_ in history])

def extract_gpt_score_and_advice(text):
    lines = text.strip().split("\n")
    score_line = next((line for line in lines if "–û—Ü–µ–Ω–∫–∞" in line), "")
    score = ''.join([c for c in score_line if c.isdigit()])
    score = int(score) if score else 0
    advice_lines = "\n".join(lines[1:])
    return score, advice_lines.strip()

def log_to_csv(row):
    columns = ["date", "goal", "actions", "browser", "time_spent", "priority", "gpt_score", "manual_score", "gpt_advice"]
    df = pd.DataFrame([row], columns=columns)
    if os.path.exists(HISTORY_FILE):
        existing = pd.read_csv(HISTORY_FILE)
        df = pd.concat([existing, df], ignore_index=True)
    df.to_csv(HISTORY_FILE, index=False)

# === UI ===
st.set_page_config(page_title="Goal Tracker", page_icon="üéØ")
st.title("üéØ –¶–µ–ª–µ–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ò–ò ‚Äî v0.6")

tab1, tab2, tab3, tab4 = st.tabs(["1. –ú–æ–∏ –¶–µ–ª–∏", "2. –ß—Ç–æ —è —Å–¥–µ–ª–∞–ª", "3. –ê–Ω–∞–ª–∏–∑", "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"])

# === TAB 1: Goal Manager ===
with tab1:
    st.header("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏")

    with st.form("goal_form"):
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["–ö–∞—Ä—å–µ—Ä–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–û–±—É—á–µ–Ω–∏–µ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–§–∏–Ω–∞–Ω—Å—ã", "–î—Ä—É–≥–æ–µ"])
        priority = st.slider("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", 1, 10, 7)
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
        if submitted and name:
            st.session_state["goals_list"].append({
                "name": name, "category": category, "priority": priority
            })
            st.success("‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    if st.session_state["goals_list"]:
        st.subheader("–ú–æ–∏ —Ü–µ–ª–∏:")
        for idx, goal in enumerate(st.session_state["goals_list"]):
            st.markdown(f"- **{goal['name']}** ({goal['category']}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {goal['priority']})")
            if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete_{idx}"):
                st.session_state["goals_list"].pop(idx)
                st.experimental_rerun()
    else:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")

# === TAB 2: Daily Actions ===
with tab2:
    st.header("üóìÔ∏è –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è")

    today = st.date_input("–î–∞—Ç–∞", datetime.date.today())
    actions = st.text_area("–ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏?", height=150)
    time_spent = st.slider("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã", 0, 24, 4)

    goal_names = [g["name"] for g in st.session_state["goals_list"]]
    selected_goal = st.selectbox("üìå –ö–∞–∫–∞—è —Ü–µ–ª—å —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ–∫—É—Å–µ?", goal_names if goal_names else ["–ù–µ—Ç —Ü–µ–ª–µ–π"])

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è"):
        st.session_state["today"] = today
        st.session_state["actions"] = actions
        st.session_state["selected_goal"] = selected_goal
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# === TAB 3: Analysis ===
with tab3:
    st.header("üìà –ê–Ω–∞–ª–∏–∑ –¥–Ω—è")

    if st.button("üì• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞"):
        with st.spinner("–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            try:
                browser_data = get_browser_data()
                st.session_state["browser_log"] = browser_data
                st.success("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

    manual_browser_log = st.text_area("–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é:", value=st.session_state.get("browser_log", ""), height=100)

    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        with st.spinner("GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –¥–µ–Ω—å..."):
            try:
                goals = st.session_state["selected_goal"]
                actions = st.session_state["actions"]
                today = st.session_state["today"]
                priority = next((g["priority"] for g in st.session_state["goals_list"] if g["name"] == goals), 5)
                ai_result = analyze_day_with_ai(goals, actions, manual_browser_log)
                gpt_score, gpt_advice = extract_gpt_score_and_advice(ai_result)
                manual_score = min(time_spent * 4 + priority * 2, 100)

                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
                st.markdown("### üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã GPT")
                st.markdown(ai_result)
                st.markdown(f"### üßÆ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: `{manual_score}/100`")

                # Log result
                log_to_csv([
                    today, goals, actions, manual_browser_log,
                    time_spent, priority, gpt_score, manual_score, gpt_advice
                ])

                # Markdown export
                report_md = f"""## üóìÔ∏è {today}
### üéØ –¶–µ–ª—å:
{goals}

### ‚úÖ –î–µ–π—Å—Ç–≤–∏—è:
{actions}

### üåê –ë—Ä–∞—É–∑–µ—Ä:
{manual_browser_log}

### üìà GPT-–∞–Ω–∞–ª–∏–∑:
{ai_result}

### üßÆ –ú–æ—è –æ—Ü–µ–Ω–∫–∞:
{manual_score}/100
"""
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (.md)",
                    data=report_md,
                    file_name=f"day_report_{today}.md",
                    mime="text/markdown"
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# === TAB 4: Progress ===
with tab4:
    st.header("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º")

    if os.path.exists(HISTORY_FILE):
        df = pd.read_csv(HISTORY_FILE)

        goal_filter = st.selectbox("üìÇ –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–∏", ["–í—Å–µ"] + sorted(df["goal"].unique().tolist()))
        if goal_filter != "–í—Å–µ":
            df = df[df["goal"] == goal_filter]

        st.line_chart(df[["gpt_score", "manual_score"]])
        st.dataframe(df.tail(30))

        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False)
        st.download_button("üìÅ –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (CSV)", csv_buffer.getvalue(), "full_history.csv", "text/csv")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑.")


# In[ ]:




